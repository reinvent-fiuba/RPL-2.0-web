# auto detects a good number of processes to run
worker_processes auto;

#Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}

http {

    # what times to include
    include       /etc/nginx/mime.types;
    # what is the default one
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format main '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    upstream producer {
	      server producer:8080;
        #   server 127.0.0.1:8080;
	}

    upstream queue_management {
	      server queue:15672;
        # server 127.0.0.1:9999;
	}
	 
	server {

        # Only works if webpack produces index_bundle.***.js.gz
        gzip on;
        gzip_static on;    
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_proxied  any;
        gzip_vary on;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;    

	    # listen on port 80
        listen 80 default_server;
          
        root /var/www/;
        index index.html;
	 
        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to redirecting to index.html
            try_files $uri $uri/ /index.html;
        }

         # Any call to /api/anything will redirect to http://producer/api/anything
        # Note that the /api is stripped away
        location /api/ {
	        proxy_pass http://producer/api/;
	        proxy_http_version 1.1;
	        proxy_set_header Upgrade $http_upgrade;
	        proxy_set_header Connection 'upgrade';
	        proxy_set_header Host $host;
	        proxy_cache_bypass $http_upgrade;
	      }

        # Any call to /queue/anything will redirect to http://queue/anything
        # Note that the /queue is stripped away
        # https://stackoverflow.com/questions/49742269/rabbitmq-management-over-https-and-nginx
        location ~* /queue/api/(.*?)/(.*) {
            proxy_pass http://queue_management/api/$1/%2F/$2?$query_string;
	        proxy_buffering off;
            proxy_http_version 1.1;
	        proxy_set_header Upgrade $http_upgrade;
	        proxy_set_header Connection 'upgrade';
	        proxy_set_header Host $host;
	        proxy_cache_bypass $http_upgrade;
	      }
        
        location ~* /queue/(.*) {
            rewrite ^/queue/(.*)$ /$1 break;
            proxy_pass http://queue_management;
	        proxy_http_version 1.1;
            proxy_buffering off;
	        proxy_set_header Upgrade $http_upgrade;
	        proxy_set_header Connection 'upgrade';
	        proxy_set_header Host $host;
	        proxy_cache_bypass $http_upgrade;
	      }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
    }
}
